
    <h2>Problem Statement:</h2>
    <p>
        Design and Implementation of Payroll Processing System
    </p>

    <p>
        In today's dynamic business environment, efficient management of employee payroll is crucial for organizational success. Your task is to design and implement a Payroll Processing System for a company.
    </p>

    <p>
        The system should be capable of handling employee information, department details, position details, allowances, deductions, base pay, and payroll processing.
    </p>

    <h3>Table "Employee"</h3>
    <pre>
        "EmployeeID" INT [pk]
        "FirstName" VARCHAR(255)
        "LastName" VARCHAR(255)
        "DateOfBirth" DATE
        "Gender" CHAR(1)
        "ContactNumber" VARCHAR(20) [unique]
        "Email" VARCHAR(255) [unique]
        "Address" VARCHAR(500)
        "BankAccountNumber" VARCHAR(50) [unique]
        "TaxID" VARCHAR(50) [unique]
        "Position" VARCHAR(100)
        "DepartmentID" INT
    </pre>

    <h3>Table "Department"</h3>
    <pre>
        "DepartmentID" INT [pk]
        "DepartmentName" VARCHAR(100) [unique]
    </pre>

    <h4>Inserted Data in Department Table:</h4>
    <pre>
        (DepartmentID, DepartmentName) 
        (101, 'Engineering'),
        (102, 'Sales'),
        (103, 'Human Resources');
    </pre>

    <h4>Inserted Data in Employee Table:</h4>
    <pre>
       (EmployeeID, FirstName, LastName, DateOfBirth, Gender, ContactNumber, Email, Address, BankAccountNumber, TaxID, Position, DepartmentID) 
        (1, 'John', 'Doe', '1990-01-15', 'M', '1234567890', 'john.doe@example.com', '123 Main St, City, Country', '987654321', 'TAX123', 'Software Engineer', 101),
        (2, 'Jane', 'Smith', '1985-05-20', 'F', '9876543210', 'jane.smith@example.com', '456 Oak St, City, Country', '123456789', 'TAX456', 'Sales Manager', 102),
        (3, 'Bob', 'Johnson', '1992-09-30', 'M', '5552221111', 'bob.johnson@example.com', '789 Pine St, City, Country', '456789012', 'TAX789', 'HR Specialist', 103),
        (4, 'Alice', 'Williams', '1988-03-10', 'F', '3334445555', 'alice.williams@example.com', '789 Elm St, City, Country', '234567890', 'TAX234', 'Software Developer', 101),
        (5, 'Michael', 'Brown', '1995-12-22', 'M', '7778889999', 'michael.brown@example.com', '321 Birch St, City, Country', '567890123', 'TAX567', 'Sales Representative', 102),
        (6, 'Emily', 'Miller', '1982-06-05', 'F', '8889990000', 'emily.miller@example.com', '654 Pine St, City, Country', '678901234', 'TAX678', 'HR Manager', 103);
    </pre>

    <pre>
        Ref:"Department"."DepartmentID" < "Employee"."DepartmentID"
    </pre>

    <h2>Task 1:</h2>

    <ol>
    <li>Employee and Department Tables are already created, write SQL Query to create Salary and Timesheet tables.

    <p>Table "Salary"</p>
    <pre>
        "SalaryID" INT [pk]
        "EmployeeID" INT [foreign: > Employee.EmployeeID]
        "EffectiveDate" DATE
        "BaseSalary" DECIMAL(10,2)
        "Bonus" DECIMAL(10,2)
        "Deductions" DECIMAL(10,2)
        "NetSalary" DECIMAL(10,2)
    </pre>

    <p>Table "TimeSheet"</p>
    <pre>
        "TimeSheetID" INT [pk]
        "EmployeeID" INT [foreign: > Employee.EmployeeID]
        "WorkDate" DATE
        "HoursWorked" DECIMAL(5,2)
        "OvertimeHours" DECIMAL(5,2)
    </pre>
    </li>

    <li>Write Query to insert following data into Salary and TimeSheet table

    <h5>"Salary" table -> ("EmployeeID", "EffectiveDate", "BaseSalary", "Bonus", "Deductions", "NetSalary")</h5>
    <pre>
        VALUES ->  (1, '2023-01-01', 80000.00, 5000.00, 2000.00, 83000.00),
                (1, '2023-07-01', 85000.00, 6000.00, 2500.00, 86500.00);
    </pre>

    <h5>"TimeSheet" table -> ("EmployeeID", "WorkDate", "HoursWorked", "OvertimeHours")</h5>
    <pre>
        VALUES -> (1, '2023-10-01', 8.00, 2.00),
                (1, '2023-10-02', 7.50, 1.50);
    </pre>
    </li>
    </ol>
    <h2>Task 2:</h2>

    <ol>
    <li>Write a query to get all male employees' email sorted by department id.</li>
    <li>Write a query to get the oldest female employee all details.</li>
    </ol>

    <h2>Task 3:</h2>

    <ol>
    <li>Write a query to get total money earned by employee 1 on '2023-01-01' and '2023-07-01'</li>
    <li>Update employee 1 salary bonus and net salary to 6000, 84000 on '2023-01-01'</li>
    <li>Remove TimeSheet entry for date '2023-10-02'</li>
    </ol>
